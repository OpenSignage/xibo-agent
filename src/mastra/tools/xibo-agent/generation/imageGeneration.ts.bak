/*
 * Copyright (C) 2025 Open Source Digital Signage Initiative.
 *
 * You can redistribute it and/or modify
 * it under the terms of the Elastic License 2.0 (ELv2) as published by
 * the Search AI Company, either version 3 of the License, or
 * any later version.
 *
 * You should have received a copy of the GElastic License 2.0 (ELv2).
 * see <https://www.elastic.co/licensing/elastic-license>.
 */

/**
 * Image Generation Tool using Google Gemini API
 * 
 * This module provides functionality to generate images using Google's Gemini API.
 * It supports various parameters for image generation including prompt, dimensions,
 * and other generation settings.
 */

import { z } from "zod";
import { createTool } from "@mastra/core/tools";
import { GoogleGenAI, Modality } from "@google/genai";
import { config } from "../config";
import { logger } from '../../../index';
import * as fs from "node:fs";
import * as path from "path";
import { v4 as uuidv4 } from 'uuid';
import sharp from 'sharp';

/**
 * Schema for API response validation
 */
const apiResponseSchema = z.object({
  success: z.boolean(),
  data: z.object({
    imagePath: z.string(),
    imageUrl: z.string(),
    prompt: z.string(),
    width: z.number(),
    height: z.number(),
    error: z.string().optional(),
  }),
});

/**
 * Predefined aspect ratio options with their target dimensions
 * The longer side is always 1024 pixels
 */
const aspectRatioOptions = {
  '1:1': { width: 1024, height: 1024 },
  '3:4': { width: 768, height: 1024 },
  '4:3': { width: 1024, height: 768 },
  '16:9': { width: 1024, height: 576 },
  '9:16': { width: 576, height: 1024 }
} as const;

type AspectRatio = keyof typeof aspectRatioOptions;

/**
 * Crops and resizes an image to match the specified aspect ratio
 * The longer side is fixed at 1024 pixels, and the shorter side is adjusted
 * to maintain the target aspect ratio
 * 
 * @param buffer - The input image buffer
 * @param aspectRatio - The target aspect ratio
 * @returns The processed image buffer and its dimensions
 */
async function cropToAspectRatio(
  buffer: Buffer,
  aspectRatio: AspectRatio
): Promise<{ buffer: Buffer; width: number; height: number }> {
  const metadata = await sharp(buffer).metadata();
  if (!metadata.width || !metadata.height) {
    throw new Error("Invalid image metadata");
  }

  const targetRatio = aspectRatioOptions[aspectRatio];
  const targetAspect = targetRatio.width / targetRatio.height;

  let width = metadata.width;
  let height = metadata.height;
  let left = 0;
  let top = 0;

  // Fix the longer side to 1024 pixels
  if (metadata.width > metadata.height) {
    // For landscape images
    width = 1024;
    height = Math.round(width / targetAspect);
    top = Math.round((metadata.height - height) / 2);
  } else {
    // For portrait images
    height = 1024;
    width = Math.round(height * targetAspect);
    left = Math.round((metadata.width - width) / 2);
  }

  // Crop and resize the image
  const croppedBuffer = await sharp(buffer)
    .extract({ left, top, width, height })
    .resize(1024, 1024, {
      fit: 'contain',
      background: { r: 0, g: 0, b: 0, alpha: 0 }
    })
    .toBuffer();

  return {
    buffer: croppedBuffer,
    width,
    height
  };
}

/**
 * Tool for generating images using Google Gemini API
 * 
 * Features:
 * - Generate images from text prompts
 * - Support for various aspect ratios
 * - Automatic image cropping and resizing
 * - Error handling and logging
 */
export const generateImage = createTool({
  id: "generate-image",
  description: "Generate images using Google Gemini API",
  inputSchema: z.object({
    prompt: z.string().describe("Text prompt for image generation"),
    aspectRatio: z.enum(['1:1', '3:4', '4:3', '16:9', '9:16']).describe("Aspect ratio of the generated image"),
    outputDir: z.string().optional().describe("Directory to save the generated image"),
  }),
  outputSchema: apiResponseSchema,
  execute: async ({ context }) => {
    try {
      const geminiApiKey = process.env.GEMINI_API_KEY;
      if (!geminiApiKey) {
        throw new Error("GEMINI_API_KEY is not set in environment variables");
      }

      // Enhance prompt with aspect ratio information
      const dimensions = aspectRatioOptions[context.aspectRatio];
      const enhancedPrompt = `${context.prompt} (Aspect ratio: ${context.aspectRatio}, Dimensions: ${dimensions.width}x${dimensions.height})`;

      const ai = new GoogleGenAI({ apiKey: geminiApiKey });

      // Generate image using Gemini API
      const response = await ai.models.generateContent({
        model: "gemini-2.0-flash-preview-image-generation",
        contents: enhancedPrompt,
        config: {
          responseModalities: [Modality.TEXT, Modality.IMAGE],
        },
      });

      // Process the response
      let imagePath = '';
      let imageUrl = '';
      let width = 0;
      let height = 0;
      
      if (!response.candidates?.[0]?.content?.parts) {
        throw new Error("Invalid response from Gemini API");
      }

      for (const part of response.candidates[0].content.parts) {
        if (part.inlineData?.data) {
          const imageData = part.inlineData.data;
          if (typeof imageData !== 'string') {
            throw new Error("Invalid image data format");
          }
          
          const buffer = Buffer.from(imageData, "base64");
          
          // Crop and resize the image to match the target aspect ratio
          const { buffer: croppedBuffer, width: croppedWidth, height: croppedHeight } = 
            await cropToAspectRatio(buffer, context.aspectRatio);
          
          // Determine output directory
          const outputDir = context.outputDir || path.join(process.cwd(), 'generated');
          
          // Create output directory if it doesn't exist
          if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
          }
          
          // Save the processed image
          const filename = `image-${uuidv4()}.png`;
          imagePath = path.join(outputDir, filename);
          fs.writeFileSync(imagePath, croppedBuffer);
          
          // Create image URL for localhost server
          const relativePath = path.relative(process.cwd(), imagePath);
          imageUrl = `http://localhost:4111/${relativePath.replace(/\\/g, '/')}`;
          
          width = croppedWidth;
          height = croppedHeight;
          
          logger.info(`Image generated and saved to: ${imagePath} (${width}x${height})`);
          logger.debug(`Image URL: ${imageUrl}`);
        }
      }

      if (!imagePath) {
        throw new Error("No image was generated");
      }

      return {
        success: true,
        data: {
          imagePath,
          imageUrl,
          prompt: enhancedPrompt,
          width,
          height,
        },
      };

    } catch (error) {
      logger.error(`generateImage: An error occurred: ${error instanceof Error ? error.message : "Unknown error"}`, { error });
      return {
        success: false,
        data: {
          imagePath: '',
          imageUrl: '',
          prompt: context.prompt,
          width: 0,
          height: 0,
          error: error instanceof Error ? error.message : "Unknown error"
        }
      };
    }
  },
});
