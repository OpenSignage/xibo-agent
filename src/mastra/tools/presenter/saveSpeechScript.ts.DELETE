/*
 * Copyright (C) 2025 Open Source Digital Signage Initiative.
 *
 * You can redistribute it and/or modify
 * it under the terms of the Elastic License 2.0 (ELv2) as published by
 * the Search AI Company, either version 3 of the License, or
 * any later version.
 *
 * You should have received a copy of the GElastic License 2.0 (ELv2).
 * see <https://www.elastic.co/licensing/elastic-license>.
 */
import { createTool } from '@mastra/core/tools';
import { z } from 'zod';
import { logger } from '../../logger';
import { promises as fs } from 'fs';
import path from 'path';
import { config } from '../xibo-agent/config';

/**
 * @module saveSpeechScriptTool
 * @description A tool to save a speech script to a text file.
 */
const inputSchema = z.object({
    fileName: z.string().describe('The base name for the output text file (e.g., "speech_script").'),
    content: z.string().describe('The full text content of the speech script to save.'),
});

const outputSchema = z.object({
  filePath: z.string().describe('The absolute path to the saved speech script file.'),
});

const errorResponseSchema = z.object({
  success: z.literal(false),
  message: z.string(),
  error: z.any().optional(),
});

const successResponseSchema = z.object({
  success: z.literal(true),
  data: outputSchema,
});

export const saveSpeechScriptTool = createTool({
  id: 'save-speech-script',
  description: 'Saves the provided speech script content to a text file in a persistent storage directory.',
  inputSchema,
  outputSchema: z.union([successResponseSchema, errorResponseSchema]),
  execute: async ({ context }) => {
    const { fileName, content } = context;
    const presenterDir = path.join(config.generatedDir, 'presenter_outputs');
    const filePath = path.join(presenterDir, `${fileName}.txt`);

    logger.info({ filePath }, 'Saving speech script...');

    try {
      await fs.mkdir(presenterDir, { recursive: true });
      await fs.writeFile(filePath, content, 'utf-8');

      logger.info({ filePath }, 'Successfully saved speech script.');
      return {
        success: true,
        data: { filePath },
      } as const;

    } catch (error) {
      const message = error instanceof Error ? error.message : "An unknown error occurred while saving the speech script.";
      logger.error({ error, filePath }, 'Failed to save speech script.');
      return {
        success: false,
        message,
        error,
      } as const;
    }
  },
}); 